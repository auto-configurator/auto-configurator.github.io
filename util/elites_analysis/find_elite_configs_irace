#!/bin/bash

# =============================================================================================

# 	Version:	1.0
# 	File:		find_elite_configs
# 	Author:		Yunshuang XIAO
# 	Purpose:	Obtain elite configurations from exsisting irace experiments for elites analysis
	
# 	INPUT:		DIR_EXP:	the folder of experiment you want to analysis
# 	OUTPUT:		No direct optput on the screen, but
# 				1st file "elites.log" of elites index for correspoding experiment
# 				2nd file "elites_config.log" of correspoding elite configurations

# =============================================================================================

error() {
    echo "`TZ=UTC date`: $0: error: $@" >&2
    exit 1
}

# usage
if [ $# == 0 ]; then
    echo " Usage: ./find_elite_configs_irace <DIR_OF_EXP> \n eg: ./find_elite_configs_irace .../crace-2.11/acotsp/numC/irace "
    exit 1
fi

DIR_EXP=$1

# exsiting file

# file will be created
ELITES_FILE="elites.log"
ELITES_CONFIG="race_log/elites_config.log"

function search_elite_configs(){

	# ----------------------------------------------------------------------------------------
	#   FUNCTION:	search_elite_configs
    #   INPUT:	    SEED_OLD:	the seed in the correspoding instance file
	#   OUTPUT:	    none
	#   EFFECTS:	this function will modify the global parameter $GSEED
	#   COMMENTS:	$GSEED comes from the upper shell
	# ----------------------------------------------------------------------------------------

    config_id=$1
    dir=$2
    cd $dir

    # read the index of configurations
    config=$(cat irace.train | grep -A 2 "Description of the best-so-far configuration:" | grep $config_id | uniq | sed "s/[ ][ ]*/,/g" | cut -d ',' -f2-)

    echo "$config" >> $ELITES_CONFIG

    sed -i 's/,/\t/g' $ELITES_CONFIG

}

function main(){

	# ----------------------------------------------------------------------------------------
	#   FUNCTION:	main function of find_elite_configs, call function search_elite_configs 
	# 				to find out the correspoding configuration for elite index
	#   INPUT: 		none
	#   OUTPUT:		none
	# ----------------------------------------------------------------------------------------

    find -L $DIR_EXP -type f | grep "irace.train" | while read file_line
    do
        # get the dir of each irace.train file
        DIR_FILE=${file_line%/*}
        # echo $DIR_FILE
        cd $DIR_FILE
        # echo `pwd`
        # delete and create new elites.log file
        # this file is to save the information of elite configurations in crace (from irace.train file)
        # rm -rf $DIR_FILE/$ELITES_FILE
        # touch $DIR_FILE/$ELITES_FILE
        rm -rf $ELITES_FILE $ELITES_CONFIG
        touch $ELITES_FILE $ELITES_CONFIG
        
        # get and save the index of elite configurations
        grep "Best-so-far configuration:" irace.train | tr -d " " | cut -d ":" -f2 | cut -d "m" -f1 | uniq > $DIR_FILE/$ELITES_FILE

        FINAL_BEST=$(tail -n 1 "race_irace.log")
        echo "Final best configuration: $FINAL_BEST" >> $ELITES_FILE

        grep -A 1 "Description of the best-so-far configuration:" irace.train | grep "ID" | sed 's/\.//g' | sed "s/[ ][ ]*/\t/g" | uniq | cut -f2- > $ELITES_CONFIG

        # check config.log in folder race_log
        cat $ELITES_FILE | while read line
        do  
            elite=$( echo $line | grep -E '^[0-9][0-9]*$' )
            if [[ "$elite" =~ ^[0-9][0-9]*$ ]]; then	
                search_elite_configs $elite $DIR_FILE
            fi
        done

    done     
}

# call the main function
echo "---------------------------------------------------------------------------------------------------------"
echo "# parameters: $#"
para_i=1
for para in $*
do
    echo "#   $para_i: $para"
done
echo "# find_elite_configs is running..."
main
status=$?
if [ $status == 0 ] ; then
	echo "# find_elite_configs is succeed "
else
	echo "# failed"
fi
echo "---------------------------------------------------------------------------------------------------------"
